
// ┓┏┓    ┓ •   ┓
// ┃┫ ┏┓┓┏┣┓┓┏┓┏┫┏     Keybinds and Software picks
// ┛┗┛┗ ┗┫┗┛┗┛┗┗┻┛
//       ┛
binds {

	Alt+Tab { focus-workspace-previous; }
	Alt+F4 { close-window; }
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    // Super+Alt+L hotkey-overlay-title="Lock the Screen: swaylock" { spawn "swaylock"; }

    // Use spawn-sh to run a shell command. Do this if you need pipes, multiple commands, etc.
    // Note: the entire command goes as a single argument. It's passed verbatim to `sh -c`.
    // For example, this is a standard bind to toggle the screen reader (orca).
    Super+Alt+S allow-when-locked=true hotkey-overlay-title=null { spawn-sh "pkill orca || exec orca"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    // Using spawn-sh allows to pass multiple arguments together with the command.
    XF86AudioRaiseVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; }

    // Example brightness key mappings for brightnessctl.
    // You can use regular spawn with multiple arguments too (to avoid going through "sh"),
    // but you need to manually put each argument in separate "" quotes.
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

    // Open/close the Overview: a zoomed-out view of workspaces and windows.
    // You can also move the mouse into the top-left hot corner,
    // or do a four-finger swipe up on a touchpad.
    Mod+Tab cooldown-ms=50 repeat=true  { toggle-overview; }

    Mod+C cooldown-ms=50  { close-window; }

    // workspace navigation
    Mod+Left  { focus-column-left; }        // I won't be using rows (just an HD laptop screen sadge), hence Mod+Arrow Keys
    Mod+Right { focus-column-right; }       // are a way to navigate on my desktop as if all windows are in a 2D grid
    Mod+Up    { focus-workspace-up; }       // (since my default window sizes are either 0.5 or 1 screenful)
    Mod+Down  { focus-workspace-down; }
    Mod+Alt+Up    { focus-window-up; }       // (since my default window sizes are either 0.5 or 1 screenful)
    Mod+Alt+Down  { focus-window-down; }
    Mod+Alt+Left  { focus-column-left; }       // (since my default window sizes are either 0.5 or 1 screenful)
    Mod+Alt+Right { focus-column-right; }

    // move windows across the desktop, best used in overview mode ;)
    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+Up    { move-column-to-workspace-up; }
    Mod+Ctrl+Down  { move-column-to-workspace-down; }

    // workspace navigation (mouse)
    Mod+WheelScrollUp         cooldown-ms=50 { focus-column-left; }        // I don't know why. My brain just prefers it this way.
    Mod+WheelScrollDown       cooldown-ms=50 { focus-column-right; }       // Horizontal nav is much more conceptually related
    Mod+Shift+WheelScrollUp   cooldown-ms=50 { focus-workspace-up; }       // Vertical nav means you're jumping across contexts
    Mod+Shift+WheelScrollDown cooldown-ms=50 { focus-workspace-down; }     // Win+Shift is more tedious, hence that's why it's mapped to Vert. axis
    Mod+Ctrl+Shift+Up   { move-workspace-up; }
    Mod+Ctrl+Shift+Down { move-workspace-down; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //


    Mod+Grave { focus-workspace-previous; } // Switches focus between the current and the previous workspace.

    // Row manipulations
    Mod+BracketLeft  { consume-or-expel-window-left; }      // I only really use rows on terminals (small screen)
    Mod+BracketRight { consume-or-expel-window-right; }     // so this stays
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+Ctrl+F { expand-column-to-available-width; }        // have no use for this but leaving it here (hnuftblih)

    // Mod+C { center-column; }

    // Center all fully visible columns on screen.
    Mod+Ctrl+C { center-visible-columns; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+U       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // Toggle tabbed column display mode.

    // rather than stacked on top of each other.
    // Windows in this column will appear as vertical tabs,
    Mod+W { toggle-column-tabbed-display; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
}
